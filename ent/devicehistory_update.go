// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/sesami-2-mackerel/ent/devicehistory"
	"github.com/cateiru/sesami-2-mackerel/ent/predicate"
)

// DeviceHistoryUpdate is the builder for updating DeviceHistory entities.
type DeviceHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceHistoryMutation
}

// Where appends a list predicates to the DeviceHistoryUpdate builder.
func (_u *DeviceHistoryUpdate) Where(ps ...predicate.DeviceHistory) *DeviceHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDeviceUUID sets the "device_uuid" field.
func (_u *DeviceHistoryUpdate) SetDeviceUUID(v string) *DeviceHistoryUpdate {
	_u.mutation.SetDeviceUUID(v)
	return _u
}

// SetNillableDeviceUUID sets the "device_uuid" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableDeviceUUID(v *string) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetDeviceUUID(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *DeviceHistoryUpdate) SetEventType(v string) *DeviceHistoryUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableEventType(v *string) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *DeviceHistoryUpdate) SetTimestamp(v int64) *DeviceHistoryUpdate {
	_u.mutation.ResetTimestamp()
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableTimestamp(v *int64) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// AddTimestamp adds value to the "timestamp" field.
func (_u *DeviceHistoryUpdate) AddTimestamp(v int64) *DeviceHistoryUpdate {
	_u.mutation.AddTimestamp(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *DeviceHistoryUpdate) SetUserID(v string) *DeviceHistoryUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableUserID(v *string) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *DeviceHistoryUpdate) ClearUserID() *DeviceHistoryUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetTag sets the "tag" field.
func (_u *DeviceHistoryUpdate) SetTag(v string) *DeviceHistoryUpdate {
	_u.mutation.SetTag(v)
	return _u
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableTag(v *string) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetTag(*v)
	}
	return _u
}

// ClearTag clears the value of the "tag" field.
func (_u *DeviceHistoryUpdate) ClearTag() *DeviceHistoryUpdate {
	_u.mutation.ClearTag()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeviceHistoryUpdate) SetCreatedAt(v time.Time) *DeviceHistoryUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeviceHistoryUpdate) SetNillableCreatedAt(v *time.Time) *DeviceHistoryUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the DeviceHistoryMutation object of the builder.
func (_u *DeviceHistoryUpdate) Mutation() *DeviceHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeviceHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeviceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeviceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeviceHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeviceHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicehistory.Table, devicehistory.Columns, sqlgraph.NewFieldSpec(devicehistory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeviceUUID(); ok {
		_spec.SetField(devicehistory.FieldDeviceUUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(devicehistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(devicehistory.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTimestamp(); ok {
		_spec.AddField(devicehistory.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(devicehistory.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(devicehistory.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Tag(); ok {
		_spec.SetField(devicehistory.FieldTag, field.TypeString, value)
	}
	if _u.mutation.TagCleared() {
		_spec.ClearField(devicehistory.FieldTag, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(devicehistory.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeviceHistoryUpdateOne is the builder for updating a single DeviceHistory entity.
type DeviceHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceHistoryMutation
}

// SetDeviceUUID sets the "device_uuid" field.
func (_u *DeviceHistoryUpdateOne) SetDeviceUUID(v string) *DeviceHistoryUpdateOne {
	_u.mutation.SetDeviceUUID(v)
	return _u
}

// SetNillableDeviceUUID sets the "device_uuid" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableDeviceUUID(v *string) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetDeviceUUID(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *DeviceHistoryUpdateOne) SetEventType(v string) *DeviceHistoryUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableEventType(v *string) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *DeviceHistoryUpdateOne) SetTimestamp(v int64) *DeviceHistoryUpdateOne {
	_u.mutation.ResetTimestamp()
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableTimestamp(v *int64) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// AddTimestamp adds value to the "timestamp" field.
func (_u *DeviceHistoryUpdateOne) AddTimestamp(v int64) *DeviceHistoryUpdateOne {
	_u.mutation.AddTimestamp(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *DeviceHistoryUpdateOne) SetUserID(v string) *DeviceHistoryUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableUserID(v *string) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *DeviceHistoryUpdateOne) ClearUserID() *DeviceHistoryUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetTag sets the "tag" field.
func (_u *DeviceHistoryUpdateOne) SetTag(v string) *DeviceHistoryUpdateOne {
	_u.mutation.SetTag(v)
	return _u
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableTag(v *string) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetTag(*v)
	}
	return _u
}

// ClearTag clears the value of the "tag" field.
func (_u *DeviceHistoryUpdateOne) ClearTag() *DeviceHistoryUpdateOne {
	_u.mutation.ClearTag()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeviceHistoryUpdateOne) SetCreatedAt(v time.Time) *DeviceHistoryUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeviceHistoryUpdateOne) SetNillableCreatedAt(v *time.Time) *DeviceHistoryUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the DeviceHistoryMutation object of the builder.
func (_u *DeviceHistoryUpdateOne) Mutation() *DeviceHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the DeviceHistoryUpdate builder.
func (_u *DeviceHistoryUpdateOne) Where(ps ...predicate.DeviceHistory) *DeviceHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeviceHistoryUpdateOne) Select(field string, fields ...string) *DeviceHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DeviceHistory entity.
func (_u *DeviceHistoryUpdateOne) Save(ctx context.Context) (*DeviceHistory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeviceHistoryUpdateOne) SaveX(ctx context.Context) *DeviceHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeviceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeviceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeviceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *DeviceHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicehistory.Table, devicehistory.Columns, sqlgraph.NewFieldSpec(devicehistory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicehistory.FieldID)
		for _, f := range fields {
			if !devicehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeviceUUID(); ok {
		_spec.SetField(devicehistory.FieldDeviceUUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(devicehistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(devicehistory.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTimestamp(); ok {
		_spec.AddField(devicehistory.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(devicehistory.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(devicehistory.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Tag(); ok {
		_spec.SetField(devicehistory.FieldTag, field.TypeString, value)
	}
	if _u.mutation.TagCleared() {
		_spec.ClearField(devicehistory.FieldTag, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(devicehistory.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &DeviceHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
