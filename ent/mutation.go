// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/sesami-2-mackerel/ent/devicestatus"
	"github.com/cateiru/sesami-2-mackerel/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDeviceStatus = "DeviceStatus"
)

// DeviceStatusMutation represents an operation that mutates the DeviceStatus nodes in the graph.
type DeviceStatusMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	battery_percentage    *int
	addbattery_percentage *int
	battery_voltage       *float64
	addbattery_voltage    *float64
	position              *int
	addposition           *int
	status                *string
	timestamp             *int64
	addtimestamp          *int64
	created_at            *time.Time
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*DeviceStatus, error)
	predicates            []predicate.DeviceStatus
}

var _ ent.Mutation = (*DeviceStatusMutation)(nil)

// devicestatusOption allows management of the mutation configuration using functional options.
type devicestatusOption func(*DeviceStatusMutation)

// newDeviceStatusMutation creates new mutation for the DeviceStatus entity.
func newDeviceStatusMutation(c config, op Op, opts ...devicestatusOption) *DeviceStatusMutation {
	m := &DeviceStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeDeviceStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceStatusID sets the ID field of the mutation.
func withDeviceStatusID(id int) devicestatusOption {
	return func(m *DeviceStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *DeviceStatus
		)
		m.oldValue = func(ctx context.Context) (*DeviceStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeviceStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeviceStatus sets the old DeviceStatus of the mutation.
func withDeviceStatus(node *DeviceStatus) devicestatusOption {
	return func(m *DeviceStatusMutation) {
		m.oldValue = func(context.Context) (*DeviceStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceStatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeviceStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBatteryPercentage sets the "battery_percentage" field.
func (m *DeviceStatusMutation) SetBatteryPercentage(i int) {
	m.battery_percentage = &i
	m.addbattery_percentage = nil
}

// BatteryPercentage returns the value of the "battery_percentage" field in the mutation.
func (m *DeviceStatusMutation) BatteryPercentage() (r int, exists bool) {
	v := m.battery_percentage
	if v == nil {
		return
	}
	return *v, true
}

// OldBatteryPercentage returns the old "battery_percentage" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldBatteryPercentage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatteryPercentage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatteryPercentage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatteryPercentage: %w", err)
	}
	return oldValue.BatteryPercentage, nil
}

// AddBatteryPercentage adds i to the "battery_percentage" field.
func (m *DeviceStatusMutation) AddBatteryPercentage(i int) {
	if m.addbattery_percentage != nil {
		*m.addbattery_percentage += i
	} else {
		m.addbattery_percentage = &i
	}
}

// AddedBatteryPercentage returns the value that was added to the "battery_percentage" field in this mutation.
func (m *DeviceStatusMutation) AddedBatteryPercentage() (r int, exists bool) {
	v := m.addbattery_percentage
	if v == nil {
		return
	}
	return *v, true
}

// ResetBatteryPercentage resets all changes to the "battery_percentage" field.
func (m *DeviceStatusMutation) ResetBatteryPercentage() {
	m.battery_percentage = nil
	m.addbattery_percentage = nil
}

// SetBatteryVoltage sets the "battery_voltage" field.
func (m *DeviceStatusMutation) SetBatteryVoltage(f float64) {
	m.battery_voltage = &f
	m.addbattery_voltage = nil
}

// BatteryVoltage returns the value of the "battery_voltage" field in the mutation.
func (m *DeviceStatusMutation) BatteryVoltage() (r float64, exists bool) {
	v := m.battery_voltage
	if v == nil {
		return
	}
	return *v, true
}

// OldBatteryVoltage returns the old "battery_voltage" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldBatteryVoltage(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatteryVoltage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatteryVoltage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatteryVoltage: %w", err)
	}
	return oldValue.BatteryVoltage, nil
}

// AddBatteryVoltage adds f to the "battery_voltage" field.
func (m *DeviceStatusMutation) AddBatteryVoltage(f float64) {
	if m.addbattery_voltage != nil {
		*m.addbattery_voltage += f
	} else {
		m.addbattery_voltage = &f
	}
}

// AddedBatteryVoltage returns the value that was added to the "battery_voltage" field in this mutation.
func (m *DeviceStatusMutation) AddedBatteryVoltage() (r float64, exists bool) {
	v := m.addbattery_voltage
	if v == nil {
		return
	}
	return *v, true
}

// ResetBatteryVoltage resets all changes to the "battery_voltage" field.
func (m *DeviceStatusMutation) ResetBatteryVoltage() {
	m.battery_voltage = nil
	m.addbattery_voltage = nil
}

// SetPosition sets the "position" field.
func (m *DeviceStatusMutation) SetPosition(i int) {
	m.position = &i
	m.addposition = nil
}

// Position returns the value of the "position" field in the mutation.
func (m *DeviceStatusMutation) Position() (r int, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldPosition(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// AddPosition adds i to the "position" field.
func (m *DeviceStatusMutation) AddPosition(i int) {
	if m.addposition != nil {
		*m.addposition += i
	} else {
		m.addposition = &i
	}
}

// AddedPosition returns the value that was added to the "position" field in this mutation.
func (m *DeviceStatusMutation) AddedPosition() (r int, exists bool) {
	v := m.addposition
	if v == nil {
		return
	}
	return *v, true
}

// ResetPosition resets all changes to the "position" field.
func (m *DeviceStatusMutation) ResetPosition() {
	m.position = nil
	m.addposition = nil
}

// SetStatus sets the "status" field.
func (m *DeviceStatusMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *DeviceStatusMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DeviceStatusMutation) ResetStatus() {
	m.status = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *DeviceStatusMutation) SetTimestamp(i int64) {
	m.timestamp = &i
	m.addtimestamp = nil
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *DeviceStatusMutation) Timestamp() (r int64, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldTimestamp(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// AddTimestamp adds i to the "timestamp" field.
func (m *DeviceStatusMutation) AddTimestamp(i int64) {
	if m.addtimestamp != nil {
		*m.addtimestamp += i
	} else {
		m.addtimestamp = &i
	}
}

// AddedTimestamp returns the value that was added to the "timestamp" field in this mutation.
func (m *DeviceStatusMutation) AddedTimestamp() (r int64, exists bool) {
	v := m.addtimestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *DeviceStatusMutation) ResetTimestamp() {
	m.timestamp = nil
	m.addtimestamp = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DeviceStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeviceStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DeviceStatus entity.
// If the DeviceStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeviceStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the DeviceStatusMutation builder.
func (m *DeviceStatusMutation) Where(ps ...predicate.DeviceStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DeviceStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DeviceStatus).
func (m *DeviceStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceStatusMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.battery_percentage != nil {
		fields = append(fields, devicestatus.FieldBatteryPercentage)
	}
	if m.battery_voltage != nil {
		fields = append(fields, devicestatus.FieldBatteryVoltage)
	}
	if m.position != nil {
		fields = append(fields, devicestatus.FieldPosition)
	}
	if m.status != nil {
		fields = append(fields, devicestatus.FieldStatus)
	}
	if m.timestamp != nil {
		fields = append(fields, devicestatus.FieldTimestamp)
	}
	if m.created_at != nil {
		fields = append(fields, devicestatus.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		return m.BatteryPercentage()
	case devicestatus.FieldBatteryVoltage:
		return m.BatteryVoltage()
	case devicestatus.FieldPosition:
		return m.Position()
	case devicestatus.FieldStatus:
		return m.Status()
	case devicestatus.FieldTimestamp:
		return m.Timestamp()
	case devicestatus.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		return m.OldBatteryPercentage(ctx)
	case devicestatus.FieldBatteryVoltage:
		return m.OldBatteryVoltage(ctx)
	case devicestatus.FieldPosition:
		return m.OldPosition(ctx)
	case devicestatus.FieldStatus:
		return m.OldStatus(ctx)
	case devicestatus.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case devicestatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DeviceStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatteryPercentage(v)
		return nil
	case devicestatus.FieldBatteryVoltage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatteryVoltage(v)
		return nil
	case devicestatus.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case devicestatus.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case devicestatus.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case devicestatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceStatusMutation) AddedFields() []string {
	var fields []string
	if m.addbattery_percentage != nil {
		fields = append(fields, devicestatus.FieldBatteryPercentage)
	}
	if m.addbattery_voltage != nil {
		fields = append(fields, devicestatus.FieldBatteryVoltage)
	}
	if m.addposition != nil {
		fields = append(fields, devicestatus.FieldPosition)
	}
	if m.addtimestamp != nil {
		fields = append(fields, devicestatus.FieldTimestamp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		return m.AddedBatteryPercentage()
	case devicestatus.FieldBatteryVoltage:
		return m.AddedBatteryVoltage()
	case devicestatus.FieldPosition:
		return m.AddedPosition()
	case devicestatus.FieldTimestamp:
		return m.AddedTimestamp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBatteryPercentage(v)
		return nil
	case devicestatus.FieldBatteryVoltage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBatteryVoltage(v)
		return nil
	case devicestatus.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPosition(v)
		return nil
	case devicestatus.FieldTimestamp:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeviceStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceStatusMutation) ResetField(name string) error {
	switch name {
	case devicestatus.FieldBatteryPercentage:
		m.ResetBatteryPercentage()
		return nil
	case devicestatus.FieldBatteryVoltage:
		m.ResetBatteryVoltage()
		return nil
	case devicestatus.FieldPosition:
		m.ResetPosition()
		return nil
	case devicestatus.FieldStatus:
		m.ResetStatus()
		return nil
	case devicestatus.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case devicestatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown DeviceStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceStatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceStatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceStatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceStatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DeviceStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceStatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DeviceStatus edge %s", name)
}
