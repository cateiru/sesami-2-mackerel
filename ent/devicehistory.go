// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/sesami-2-mackerel/ent/devicehistory"
)

// DeviceHistory is the model entity for the DeviceHistory schema.
type DeviceHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// デバイスUUID
	DeviceUUID string `json:"device_uuid,omitempty"`
	// イベントタイプ（lock/unlock/manual_lock/manual_unlock等）
	EventType uint `json:"event_type,omitempty"`
	// SESAMI APIからのタイムスタンプ
	Timestamp int64 `json:"timestamp,omitempty"`
	// 鍵に付けられたタグやメモ 0 ~ 21bytes
	HistoryTag string `json:"history_tag,omitempty"`
	// 非連続（将来的には連続になる予定）、セサミデバイスが再起動するまでの履歴の一意のID、 小→大
	RecordID uint `json:"record_id,omitempty"`
	// Parameter holds the value of the "parameter" field.
	Parameter string `json:"parameter,omitempty"`
	// レコード作成日時
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devicehistory.FieldID, devicehistory.FieldEventType, devicehistory.FieldTimestamp, devicehistory.FieldRecordID:
			values[i] = new(sql.NullInt64)
		case devicehistory.FieldDeviceUUID, devicehistory.FieldHistoryTag, devicehistory.FieldParameter:
			values[i] = new(sql.NullString)
		case devicehistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceHistory fields.
func (_m *DeviceHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devicehistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case devicehistory.FieldDeviceUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_uuid", values[i])
			} else if value.Valid {
				_m.DeviceUUID = value.String
			}
		case devicehistory.FieldEventType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = uint(value.Int64)
			}
		case devicehistory.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				_m.Timestamp = value.Int64
			}
		case devicehistory.FieldHistoryTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field history_tag", values[i])
			} else if value.Valid {
				_m.HistoryTag = value.String
			}
		case devicehistory.FieldRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				_m.RecordID = uint(value.Int64)
			}
		case devicehistory.FieldParameter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parameter", values[i])
			} else if value.Valid {
				_m.Parameter = value.String
			}
		case devicehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceHistory.
// This includes values selected through modifiers, order, etc.
func (_m *DeviceHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this DeviceHistory.
// Note that you need to call DeviceHistory.Unwrap() before calling this method if this DeviceHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DeviceHistory) Update() *DeviceHistoryUpdateOne {
	return NewDeviceHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DeviceHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DeviceHistory) Unwrap() *DeviceHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DeviceHistory) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("device_uuid=")
	builder.WriteString(_m.DeviceUUID)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.EventType))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.Timestamp))
	builder.WriteString(", ")
	builder.WriteString("history_tag=")
	builder.WriteString(_m.HistoryTag)
	builder.WriteString(", ")
	builder.WriteString("record_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.RecordID))
	builder.WriteString(", ")
	builder.WriteString("parameter=")
	builder.WriteString(_m.Parameter)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceHistories is a parsable slice of DeviceHistory.
type DeviceHistories []*DeviceHistory
