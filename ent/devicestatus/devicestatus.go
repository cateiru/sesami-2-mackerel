// Code generated by ent, DO NOT EDIT.

package devicestatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the devicestatus type in the database.
	Label = "device_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBatteryPercentage holds the string denoting the battery_percentage field in the database.
	FieldBatteryPercentage = "battery_percentage"
	// FieldBatteryVoltage holds the string denoting the battery_voltage field in the database.
	FieldBatteryVoltage = "battery_voltage"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the devicestatus in the database.
	Table = "device_status"
)

// Columns holds all SQL columns for devicestatus fields.
var Columns = []string{
	FieldID,
	FieldBatteryPercentage,
	FieldBatteryVoltage,
	FieldPosition,
	FieldStatus,
	FieldTimestamp,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the DeviceStatus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBatteryPercentage orders the results by the battery_percentage field.
func ByBatteryPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryPercentage, opts...).ToFunc()
}

// ByBatteryVoltage orders the results by the battery_voltage field.
func ByBatteryVoltage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryVoltage, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
