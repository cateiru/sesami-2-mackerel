// Code generated by ent, DO NOT EDIT.

package devicestatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cateiru/sesami-2-mackerel/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldID, id))
}

// BatteryPercentage applies equality check predicate on the "battery_percentage" field. It's identical to BatteryPercentageEQ.
func BatteryPercentage(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldBatteryPercentage, v))
}

// Wm2State applies equality check predicate on the "wm2_state" field. It's identical to Wm2StateEQ.
func Wm2State(v bool) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldWm2State, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldStatus, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// BatteryPercentageEQ applies the EQ predicate on the "battery_percentage" field.
func BatteryPercentageEQ(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldBatteryPercentage, v))
}

// BatteryPercentageNEQ applies the NEQ predicate on the "battery_percentage" field.
func BatteryPercentageNEQ(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldBatteryPercentage, v))
}

// BatteryPercentageIn applies the In predicate on the "battery_percentage" field.
func BatteryPercentageIn(vs ...int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldBatteryPercentage, vs...))
}

// BatteryPercentageNotIn applies the NotIn predicate on the "battery_percentage" field.
func BatteryPercentageNotIn(vs ...int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldBatteryPercentage, vs...))
}

// BatteryPercentageGT applies the GT predicate on the "battery_percentage" field.
func BatteryPercentageGT(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldBatteryPercentage, v))
}

// BatteryPercentageGTE applies the GTE predicate on the "battery_percentage" field.
func BatteryPercentageGTE(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldBatteryPercentage, v))
}

// BatteryPercentageLT applies the LT predicate on the "battery_percentage" field.
func BatteryPercentageLT(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldBatteryPercentage, v))
}

// BatteryPercentageLTE applies the LTE predicate on the "battery_percentage" field.
func BatteryPercentageLTE(v int) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldBatteryPercentage, v))
}

// Wm2StateEQ applies the EQ predicate on the "wm2_state" field.
func Wm2StateEQ(v bool) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldWm2State, v))
}

// Wm2StateNEQ applies the NEQ predicate on the "wm2_state" field.
func Wm2StateNEQ(v bool) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldWm2State, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldContainsFold(FieldStatus, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v int64) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceStatus) predicate.DeviceStatus {
	return predicate.DeviceStatus(sql.NotPredicates(p))
}
