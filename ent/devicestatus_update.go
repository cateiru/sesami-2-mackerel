// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cateiru/sesami-2-mackerel/ent/devicestatus"
	"github.com/cateiru/sesami-2-mackerel/ent/predicate"
)

// DeviceStatusUpdate is the builder for updating DeviceStatus entities.
type DeviceStatusUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceStatusMutation
}

// Where appends a list predicates to the DeviceStatusUpdate builder.
func (_u *DeviceStatusUpdate) Where(ps ...predicate.DeviceStatus) *DeviceStatusUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBatteryPercentage sets the "battery_percentage" field.
func (_u *DeviceStatusUpdate) SetBatteryPercentage(v int) *DeviceStatusUpdate {
	_u.mutation.ResetBatteryPercentage()
	_u.mutation.SetBatteryPercentage(v)
	return _u
}

// SetNillableBatteryPercentage sets the "battery_percentage" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillableBatteryPercentage(v *int) *DeviceStatusUpdate {
	if v != nil {
		_u.SetBatteryPercentage(*v)
	}
	return _u
}

// AddBatteryPercentage adds value to the "battery_percentage" field.
func (_u *DeviceStatusUpdate) AddBatteryPercentage(v int) *DeviceStatusUpdate {
	_u.mutation.AddBatteryPercentage(v)
	return _u
}

// SetBatteryVoltage sets the "battery_voltage" field.
func (_u *DeviceStatusUpdate) SetBatteryVoltage(v float64) *DeviceStatusUpdate {
	_u.mutation.ResetBatteryVoltage()
	_u.mutation.SetBatteryVoltage(v)
	return _u
}

// SetNillableBatteryVoltage sets the "battery_voltage" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillableBatteryVoltage(v *float64) *DeviceStatusUpdate {
	if v != nil {
		_u.SetBatteryVoltage(*v)
	}
	return _u
}

// AddBatteryVoltage adds value to the "battery_voltage" field.
func (_u *DeviceStatusUpdate) AddBatteryVoltage(v float64) *DeviceStatusUpdate {
	_u.mutation.AddBatteryVoltage(v)
	return _u
}

// SetPosition sets the "position" field.
func (_u *DeviceStatusUpdate) SetPosition(v int) *DeviceStatusUpdate {
	_u.mutation.ResetPosition()
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillablePosition(v *int) *DeviceStatusUpdate {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// AddPosition adds value to the "position" field.
func (_u *DeviceStatusUpdate) AddPosition(v int) *DeviceStatusUpdate {
	_u.mutation.AddPosition(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *DeviceStatusUpdate) SetStatus(v string) *DeviceStatusUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillableStatus(v *string) *DeviceStatusUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *DeviceStatusUpdate) SetTimestamp(v int64) *DeviceStatusUpdate {
	_u.mutation.ResetTimestamp()
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillableTimestamp(v *int64) *DeviceStatusUpdate {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// AddTimestamp adds value to the "timestamp" field.
func (_u *DeviceStatusUpdate) AddTimestamp(v int64) *DeviceStatusUpdate {
	_u.mutation.AddTimestamp(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeviceStatusUpdate) SetCreatedAt(v time.Time) *DeviceStatusUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeviceStatusUpdate) SetNillableCreatedAt(v *time.Time) *DeviceStatusUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the DeviceStatusMutation object of the builder.
func (_u *DeviceStatusUpdate) Mutation() *DeviceStatusMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeviceStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeviceStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeviceStatusUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeviceStatusUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeviceStatusUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicestatus.Table, devicestatus.Columns, sqlgraph.NewFieldSpec(devicestatus.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BatteryPercentage(); ok {
		_spec.SetField(devicestatus.FieldBatteryPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBatteryPercentage(); ok {
		_spec.AddField(devicestatus.FieldBatteryPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BatteryVoltage(); ok {
		_spec.SetField(devicestatus.FieldBatteryVoltage, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBatteryVoltage(); ok {
		_spec.AddField(devicestatus.FieldBatteryVoltage, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(devicestatus.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPosition(); ok {
		_spec.AddField(devicestatus.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(devicestatus.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(devicestatus.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTimestamp(); ok {
		_spec.AddField(devicestatus.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(devicestatus.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeviceStatusUpdateOne is the builder for updating a single DeviceStatus entity.
type DeviceStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceStatusMutation
}

// SetBatteryPercentage sets the "battery_percentage" field.
func (_u *DeviceStatusUpdateOne) SetBatteryPercentage(v int) *DeviceStatusUpdateOne {
	_u.mutation.ResetBatteryPercentage()
	_u.mutation.SetBatteryPercentage(v)
	return _u
}

// SetNillableBatteryPercentage sets the "battery_percentage" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillableBatteryPercentage(v *int) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetBatteryPercentage(*v)
	}
	return _u
}

// AddBatteryPercentage adds value to the "battery_percentage" field.
func (_u *DeviceStatusUpdateOne) AddBatteryPercentage(v int) *DeviceStatusUpdateOne {
	_u.mutation.AddBatteryPercentage(v)
	return _u
}

// SetBatteryVoltage sets the "battery_voltage" field.
func (_u *DeviceStatusUpdateOne) SetBatteryVoltage(v float64) *DeviceStatusUpdateOne {
	_u.mutation.ResetBatteryVoltage()
	_u.mutation.SetBatteryVoltage(v)
	return _u
}

// SetNillableBatteryVoltage sets the "battery_voltage" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillableBatteryVoltage(v *float64) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetBatteryVoltage(*v)
	}
	return _u
}

// AddBatteryVoltage adds value to the "battery_voltage" field.
func (_u *DeviceStatusUpdateOne) AddBatteryVoltage(v float64) *DeviceStatusUpdateOne {
	_u.mutation.AddBatteryVoltage(v)
	return _u
}

// SetPosition sets the "position" field.
func (_u *DeviceStatusUpdateOne) SetPosition(v int) *DeviceStatusUpdateOne {
	_u.mutation.ResetPosition()
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillablePosition(v *int) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// AddPosition adds value to the "position" field.
func (_u *DeviceStatusUpdateOne) AddPosition(v int) *DeviceStatusUpdateOne {
	_u.mutation.AddPosition(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *DeviceStatusUpdateOne) SetStatus(v string) *DeviceStatusUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillableStatus(v *string) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *DeviceStatusUpdateOne) SetTimestamp(v int64) *DeviceStatusUpdateOne {
	_u.mutation.ResetTimestamp()
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillableTimestamp(v *int64) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// AddTimestamp adds value to the "timestamp" field.
func (_u *DeviceStatusUpdateOne) AddTimestamp(v int64) *DeviceStatusUpdateOne {
	_u.mutation.AddTimestamp(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeviceStatusUpdateOne) SetCreatedAt(v time.Time) *DeviceStatusUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeviceStatusUpdateOne) SetNillableCreatedAt(v *time.Time) *DeviceStatusUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the DeviceStatusMutation object of the builder.
func (_u *DeviceStatusUpdateOne) Mutation() *DeviceStatusMutation {
	return _u.mutation
}

// Where appends a list predicates to the DeviceStatusUpdate builder.
func (_u *DeviceStatusUpdateOne) Where(ps ...predicate.DeviceStatus) *DeviceStatusUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeviceStatusUpdateOne) Select(field string, fields ...string) *DeviceStatusUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DeviceStatus entity.
func (_u *DeviceStatusUpdateOne) Save(ctx context.Context) (*DeviceStatus, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeviceStatusUpdateOne) SaveX(ctx context.Context) *DeviceStatus {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeviceStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeviceStatusUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DeviceStatusUpdateOne) sqlSave(ctx context.Context) (_node *DeviceStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicestatus.Table, devicestatus.Columns, sqlgraph.NewFieldSpec(devicestatus.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicestatus.FieldID)
		for _, f := range fields {
			if !devicestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BatteryPercentage(); ok {
		_spec.SetField(devicestatus.FieldBatteryPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBatteryPercentage(); ok {
		_spec.AddField(devicestatus.FieldBatteryPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BatteryVoltage(); ok {
		_spec.SetField(devicestatus.FieldBatteryVoltage, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBatteryVoltage(); ok {
		_spec.AddField(devicestatus.FieldBatteryVoltage, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(devicestatus.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPosition(); ok {
		_spec.AddField(devicestatus.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(devicestatus.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(devicestatus.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTimestamp(); ok {
		_spec.AddField(devicestatus.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(devicestatus.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &DeviceStatus{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
